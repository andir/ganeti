diff --git a/src/Ganeti/Metad/WebServer.hs b/src/Ganeti/Metad/WebServer.hs
index 1671ddf4b..e6b34dbaf 100644
--- a/src/Ganeti/Metad/WebServer.hs
+++ b/src/Ganeti/Metad/WebServer.hs
@@ -37,9 +37,10 @@ module Ganeti.Metad.WebServer (start) where
 
 import Control.Applicative
 import Control.Concurrent (MVar, readMVar)
-import Control.Monad.Error.Class (MonadError, catchError, throwError)
 import Control.Monad.IO.Class (liftIO)
-import qualified Control.Monad.CatchIO as CatchIO (catch)
+import Data.Typeable (Typeable)
+import Control.Exception.Base (Exception)
+import Control.Exception.Lifted (catch, throwIO)
 import qualified Data.CaseInsensitive as CI
 import Data.List (intercalate)
 import Data.Map (Map)
@@ -64,13 +65,19 @@ import Ganeti.Metad.Types (InstanceParams)
 
 type MetaM = Snap ()
 
+data MetaMExc = MetaMExc String deriving (Show, Typeable)
+instance Exception MetaMExc
+
+throwError :: String -> Snap a
+throwError = throwIO . MetaMExc
+
 split :: String -> [String]
 split str =
   case span (/= '/') str of
     (x, []) -> [x]
     (x, _:xs) -> x:split xs
 
-lookupInstanceParams :: MonadError String m => String -> Map String b -> m b
+lookupInstanceParams :: String -> Map String b -> Snap b
 lookupInstanceParams inst params =
   case Map.lookup inst params of
     Nothing -> throwError $ "Could not get instance params for " ++ show inst
@@ -88,7 +95,7 @@ error405 ms = modifyResponse $
   addHeader (CI.mk "Allow") (ByteString.pack . intercalate ", " $ map show ms)
   . setResponseStatus 405 "Method not allowed"
 
-maybeResult :: MonadError String m => Result t -> (t -> m a) -> m a
+maybeResult :: Result t -> (t -> Snap a) -> Snap a
 maybeResult (Error err) _ = throwError err
 maybeResult (Ok x) f = f x
 
@@ -119,7 +126,7 @@ serveOsPackage inst params key =
      maybeResult (JSON.readJSON instParams >>=
                   Config.getPublicOsParams >>=
                   getOsPackage) $ \package ->
-       serveFile package `CatchIO.catch` \err ->
+       serveFile package `catch` \err ->
          throwError $ "Could not serve OS package: " ++ show (err :: IOError)
   where getOsPackage osParams =
           case lookup key (JSON.fromJSObject osParams) of
@@ -144,7 +151,7 @@ serveOsScript inst params script =
           throwError $ "Could not find OS script " ++ show (os </> script)
         serveScript os (d:ds) =
           serveFile (d </> os </> script)
-          `CatchIO.catch`
+          `catch`
           \err -> do let _ = err :: IOError
                      serveScript os ds
 
@@ -158,10 +165,11 @@ handleMetadata params GET  "ganeti" "latest" "os/os-install-package" =
        Logging.logInfo $ "OS install package for " ++ show remoteAddr
        readMVar params
      serveOsPackage remoteAddr instanceParams "os-install-package"
-       `catchError`
+       `catch`
        \err -> do
+         let MetaMExc e = err
          liftIO .
-           Logging.logWarning $ "Could not serve OS install package: " ++ err
+           Logging.logWarning $ "Could not serve OS install package: " ++ e
          error404
 handleMetadata params GET  "ganeti" "latest" "os/package" =
   do remoteAddr <- ByteString.unpack . rqRemoteAddr <$> getRequest
@@ -174,7 +182,7 @@ handleMetadata params GET  "ganeti" "latest" "os/parameters.json" =
      instanceParams <- liftIO $ do
        Logging.logInfo $ "OS parameters for " ++ show remoteAddr
        readMVar params
-     serveOsParams remoteAddr instanceParams `catchError`
+     serveOsParams remoteAddr instanceParams `catch`
        \err -> do
          liftIO . Logging.logWarning $ "Could not serve OS parameters: " ++ err
          error404
@@ -187,7 +195,7 @@ handleMetadata params GET  "ganeti" "latest" paramPath | isParamPath paramPath =
         Logging.logInfo $ "OS param " ++ param ++ " for " ++ show remoteAddr
         readMVar params
       serveSingleOsParam remoteAddr instanceParams param
-        `catchError`
+        `catch`
         \err -> do
           liftIO .
             Logging.logWarning $ "Could not serve single OS param " ++ param ++
@@ -200,7 +208,7 @@ handleMetadata params GET  "ganeti" "latest" script | isScript script =
      instanceParams <- liftIO $ do
        Logging.logInfo $ "OS package for " ++ show remoteAddr
        readMVar params
-     serveOsScript remoteAddr instanceParams (last $ split script) `catchError`
+     serveOsScript remoteAddr instanceParams (last $ split script) `catch`
        \err -> do
          liftIO . Logging.logWarning $ "Could not serve OS scripts: " ++ err
          error404
diff --git a/src/Ganeti/Metad/ConfigCore.hs b/src/Ganeti/Metad/ConfigCore.hs
index 5821baa9d..7a243f59e 100644
--- a/src/Ganeti/Metad/ConfigCore.hs
+++ b/src/Ganeti/Metad/ConfigCore.hs
@@ -1,5 +1,6 @@
 {-# LANGUAGE TupleSections, TemplateHaskell, CPP, UndecidableInstances,
-    MultiParamTypeClasses, TypeFamilies, GeneralizedNewtypeDeriving #-}
+    MultiParamTypeClasses, TypeFamilies, GeneralizedNewtypeDeriving,
+    ImpredicativeTypes #-}
 {-| Functions of the metadata daemon exported for RPC
 
 -}
